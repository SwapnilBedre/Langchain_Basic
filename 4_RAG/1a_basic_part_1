import os
from langchain_groq import ChatGroq
from langchain_text_splitters import CharacterTextSplitter
from langchain_community.document_loaders import TextLoader
from langchain_community.vectorstores import Chroma
from langchain.embeddings import HuggingFaceEmbeddings


# defining the derectory containing the text files and the persistant directory
current_dir = os.path.dirname(os.path.abspath(__file__))
file_path = os.path.join(current_dir, "documents", "hulk_description.txt")
persistant_directory = os.path.join(current_dir, "db", "chroma_db")

# Use croma DB to store vectors.
if not os.path.exists(persistant_directory):
    print("persistant_directory does not exist, initializing vector store...")

    # ensure the text file exists.
    if not os.path.exists(file_path):
        raise FileNotFoundError(
            f"File not {file_path} does not exist. Please check the file path."
        )
    
    # reload the text content from the file
    loader = TextLoader(file_path)
    documents = loader.load()

    # split the text into chunks
    text_splitter = CharacterTextSplitter(chunk_size=100, chunk_overlap=0)
    docs = text_splitter.split_documents(documents)

    #  Display information about the split documents
    print("\n------- Split Documents Information -------")
    print(f"Total number of documents chunks: {len(docs)}")
    print("sample chunk: \n{docs[0].page_content}\n")

    # create the embeddings
    embeddings = HuggingFaceEmbeddings(
        model_name="all-MiniLM-L6-v2")
    print("\n ---- Finished creating embeddings ----")    #Update to void embedding model if needed

    # create the vector store and persist it automatically
    print("\n---- Creating vector store ----")
    db = Chroma.from_documents(
        docs,
        embeddings,
        persist_directory=persistant_directory
    )
    print("Vector store created and persisted successfully.")

else:
    print("Persistant directory already exists, loading vector store...")

